#!/usr/bin/node
// vim: ai:ts=2:sw=2:et:syntax=javascript

var Q = require('q');
Q.longStackSupport = true;
var emptyc = require('../lib/emptyc');
var path = require("path");
var fs = require("fs");
var dire = require("dire");

var configpath = path.join(process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'], ".empty.conf");
var configpath2 = path.join(process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'], ".emptyc.conf");

var applyconf = function(data) {
  var user_config = JSON.parse(data);
  user_config.__proto__ = emptyc.Config;
  emptyc.Config = user_config;
};

var defer = Q.defer();
fs.exists(Config.plugin_dir, defer.resolve);

Q.resolve()
  .then(Q.nfcall(fs.readFile, configpath, "utf-8").then(applyconf, function(){}))
  .then(Q.nfcall(fs.readFile, configpath2, "utf-8").then(applyconf, function(){}))
  .then(defer.promise)
  .then(function(files) {
    var modules = dire(Config.plugin_dir, true, '.js');
    return Q.all(Object.keys(modules).map(function(key) {
      if (modules[key].init)
        return modules[key].init(emptyc);
      else
        return Q.resolve();
    }));
  })
  .then(emptyc.Commands._init).then(emptyc.Commands._start).done();
