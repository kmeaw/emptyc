#!/usr/bin/env node
// vim: ai:ts=2:sw=2:et:syntax=javascript

(function() {
  "use strict";
  var Q = require('q');
  Q.longStackSupport = true;
  var readline = require('readline');
  var Emptyc = require('../lib/emptyc');
  var path = require("path");
  var fs = require("fs");
  var dire = require("dire");
  var emptyc = new Emptyc();
  var NodeCache = require("node-cache");
  var mkdirp = require('mkdirp');
  var colors = require('colors');
  var EventEmitter = require('events').EventEmitter;

  var homepath = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
  var configpath = path.join(homepath, ".empty.conf");
  var configpath2 = path.join(homepath, ".emptyc.conf");
  var cachepath = path.join(process.env.XDG_CACHE_HOME || path.join(homepath, ".cache"), "emptyc");

  mkdirp.sync(cachepath);

  var applyconf = function(data) {
    var user_config = JSON.parse(data);
    var merge = function merge(target, source)
    {
      for (var k in source)
      {
        if ((target[k] instanceof Object) && (source[k] instanceof Object))
          merge(target[k], source[k]);
        else
          target[k] = source[k];
      }
    };
    merge(emptyc.config, user_config);
  };

  var ev_interface = function() {
    emptyc.ev = new EventEmitter();
    emptyc.ev.on("exit", function(key, code) {
      if (code !== 0)
        console.warn("%s (exit %d)", colors.red(key), code);
    });
    emptyc.ev.on("end", function(key) {
      if (!emptyc.config.parallel)
        console.log("");
    });
    emptyc.ev.on("info", function(data) {
      console.log(data);
    });
    emptyc.ev.on("output", function(data, key, type) {
      if (!type)
      {
        if (emptyc.config.parallel)
          console.log("%s: %s", key, data.trim());
        else
          process.stdout.write(data);
      }
      else if (type == "stderr")
      {
        if (emptyc.config.parallel)
          console.log("%s! %s", key, colors.red(data.trim()));
        else
          process.stderr.write(colors.red(data));
      }
      else
        console.log("%s[%s] %s", key, type, data);
    });
    emptyc.ev.on("start", function(key) {
      if (!emptyc.config.parallel)
        console.log("=== %s ===", key);
    });
    emptyc.ev.on("warn", function(data, key) {
      console.log("%s! %s", colors.red(key), data);
    });
  };

  var finalizers = [];
  var modules = {};

  var start = function(emptyc) {
    var defer = Q.defer();
    var stop = function() { 
      emptyc.running = false; 
      defer.resolve();
    };
    if (!emptyc.rl)
    {
      var stream = require("stream");
      emptyc.stdin = stream.Readable();
      emptyc.stdin._read = function() {
      };
      emptyc.stdin.ready = true;
      if (process.stdin.isTTY)
      {
        process.stdin.setRawMode(true);
      }
      process.stdin.on("readable", function() {
        var d = process.stdin.read();
        if (!emptyc.stdin.ready)
        {
          if (emptyc.ev && d)
          {
            if (emptyc.mode != "write")
            {
              switch (d.toString())
              {
                case 'w':
                  emptyc.oldmode = emptyc.mode;
                  emptyc.ev.emit("set-mode", "write");
                  console.log("Press ^] to activate ``%s'' mode.", emptyc.oldmode);
                  break;
                case 'k':
                  emptyc.ev.emit("kill-child");
                  break;
                case "\u0003":
                case 'q':
                  emptyc.ev.emit("abort-session");
                  break;
                case 's':
                  emptyc.ev.emit("show-status");
                  break;
              }
            }
            else // mode == "write"
            {
              if (d.toString() == "\u001d")
                emptyc.ev.emit("set-mode", emptyc.oldmode);
              else if (d.toString() == "\r")
                emptyc.ev.emit("write", "\n");
              else
                emptyc.ev.emit("write", d);
            }
          }
          return;
        }
        if (d)
          emptyc.stdin.push(d);
      });
      emptyc.rl = readline.createInterface({input:emptyc.stdin, output:process.stdout, completer:emptyc.completer.bind(emptyc)});
      var resizers = process.stdout.listeners("resize");
      process.stdout.removeAllListeners("resize");
      process.stdout.on("resize", function() {
        if (!emptyc.stdin.ready)
          return;
        var args = arguments;
        var self = this;
        resizers.forEach(function(r) {
          r.apply(self, args);
        });
      });
    }
    if (process.stdin.isTTY)
    {
      var prompt = emptyc.prompt();
      emptyc.rl.setPrompt(prompt, prompt.stripColors.length);
      emptyc.rl.prompt();
    }
    else
      process.stdin.on('end', stop);
    emptyc.running = true;
    emptyc.rl.on('line', function(line) {
      if (process.stdin.isTTY)
      {
        emptyc.stdin.ready = false;
      }
      emptyc.exec(line)
        .then(function() { }, function(e) { console.error(e); })
        .fin(function() { 
          ev_interface();
          emptyc.stdin.ready = true;
          if (process.stdin.isTTY)
          {
            if(emptyc.running)
            {
              var prompt = emptyc.prompt();
              process.stdin.setRawMode(false); process.stdin.setRawMode(true);
              emptyc.rl.setPrompt(prompt, prompt.stripColors.length);
              if (emptyc.rl._refreshLine)
                emptyc.rl._refreshLine();
              emptyc.rl.prompt();
            }
            else
            {
              emptyc.rl.removeListener('close', stop);
              stop();
            }
          }
          else if (!emptyc.running)
            stop();
        }).done();
    });
    emptyc.rl.on('close', stop);
    process.on('SIGTSTP', function() {
      emptyc.rl.once('pause', function() { emptyc.rl.prompt(); });
      process.once('SIGCONT', function() { process.stdin.setRawMode(false); process.stdin.setRawMode(true); });
      process.kill(process.pid, 'SIGSTOP');
    });
    emptyc.rl.on('SIGINT', function() {
      emptyc.rl.write(null, {ctrl: true, name: 'u'});
    });
    return defer.promise;
  };

  ev_interface();

  if (!emptyc.config("plugin_dir"))
    emptyc.config("plugin_dir", path.join(path.dirname(__filename), "..", "plugins"));

  Q.resolve()
    .then(function() { return Q.nfcall(fs.readFile, configpath, "utf-8").then(applyconf, function(){}); })
    .then(function() { return Q.nfcall(fs.readFile, configpath2, "utf-8").then(applyconf, function(){}); })
    .then(function() {
      var defer = Q.defer();
      fs.exists(emptyc.config.plugin_dir, defer.resolve);
      return defer.promise;
    })
    .then(function(exists) {
      if (exists)
      {
        modules = dire(emptyc.config.plugin_dir, true, '.js');
        return Q.all(Object.keys(modules).map(function(key) {
          if (modules[key].cache)
          {
            var fkey = key.replace(/\//g, '.') + ".json";
            var fpath = path.join(cachepath, fkey);
            modules[key].cache.path = fpath;
            if (fs.existsSync(fpath))
              modules[key].cache.data = JSON.parse(fs.readFileSync(fpath, "utf-8"));
          }
          if (modules[key].fini)
            finalizers.push(modules[key].fini.bind(modules[key]));
          if (modules[key].init)
            return modules[key].init(emptyc);
          else
            return Q.resolve();
        }));
      }
      else
      {
        console.log("Missing %s", emptyc.config.plugin_dir);
        return Q.resolve();
      }
    })
    .then(function() {
      var fpath = path.join(cachepath, "emptyc.json");
      emptyc.cache.path = fpath;
      if (fs.existsSync(fpath))
        emptyc.cache.data = JSON.parse(fs.readFileSync(fpath, "utf-8"));
      return Q.resolve();
    })
    .then(function() {
      process.title = path.basename(__filename, ".js");
      return Q.resolve();
    })
    .then(Q.all(emptyc.hooks.start))
    .then(function() { return start(emptyc); })
    .then(function() {
      finalizers.forEach(function(f) { f(emptyc); });
      return Q.all(emptyc.hooks.exit)
    })
    .then(function() {
      for(var key in modules)
      {
        if (modules[key].cache && modules[key].cache.path)
          fs.writeFileSync(modules[key].cache.path, JSON.stringify(modules[key].cache.data));
      }
      fs.writeFileSync(emptyc.cache.path, JSON.stringify(emptyc.cache.data));
      return Q.resolve();
    })
    .then(emptyc.commands.exit.bind(emptyc))
    .then(function() { process.exit(0) })
    .done();
}());
